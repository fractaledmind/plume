#!/usr/bin/env ruby
# frozen_string_literal: true

require "net/http"
require "uri"
require "fileutils"
require "time"

def contains?(array, sub)
	array.join(',').include?(sub.join(','))
end
def starts_with?(array, sub)
	array.join(',').start_with?(sub.join(','))
end
def ends_with?(array, sub)
	array.join(',').end_with?(sub.join(','))
end

uri = URI("https://raw.githubusercontent.com/sqlite/sqlite/refs/heads/master/src/parse.y")
$contents = nil

# download the sqlite `parse.y` file for the master branch
Net::HTTP.start(uri.host, uri.port, use_ssl: true) do |http|
	request = Net::HTTP::Get.new(uri)
	response = http.request(request)

	# Handle redirects
	if response.is_a?(Net::HTTPRedirection)
		uri = URI(response["location"])
		response = Net::HTTP.get_response(uri)
	end

	if response.is_a?(Net::HTTPSuccess)
		$contents = response.body
	else
		raise "Error: #{response.code} - #{response.message}"
	end
end

# extract the SQL statements from the test files
grammar = Hash.new { |h, k| h[k] = [] }
pattern = /^(?:.+::=[^.]+\.)|(?:%token_class[^.]+\.)/
ignored_snippets = [
	/^\/\//,
	/^scanpt.+::=/,
	/^scantok.+::=/,
].freeze

matches = $contents.scan(pattern)
matches.each do |match|
	result = match.tap(&:strip!)
	next if ignored_snippets.any? { |it| result.match?(it) }

	if result.start_with?('%token_class')
		rule, definition = result.gsub('%token_class ', '').split(/\s+/)
	else
		rule, definition = result.gsub(/\(.*?\)/, '').split(/\s+::=\s+/)
	end
	tokens = definition.chomp('.').tap(&:strip!).split(/\s+/)
	next (grammar[rule.strip] << tokens) if tokens.empty?
  sequences = tokens.map { |it| it.split('|') }.reduce(&:product).map{ |it| Array(it).flatten }
  sequences.each { |it| grammar[rule.strip] << it.reject { |it| ["scanpt", "scantok"].include?(it) } }
end

# e.g. "cmdlist"=>[["cmdlist", "ecmd"], ["ecmd"]]
# e.g. "case_exprlist"=>[["case_exprlist", "WHEN", "expr", "THEN", "expr"], ["WHEN", "expr", "THEN", "expr"]]
def mutate_one_or_more_no_sep(rule, pair)
  return unless pair.size == 2
  base, recurse = pair.sort_by(&:size)
  _rule, *rest = recurse
  return unless _rule == rule && rest == base

  # rule ::= rule rest | rest
  #      vvv
  # rule ::= rest | rest rule
  [rule, [rest, rest + [rule]]]
end

# e.g. "eidlist"=>[["eidlist", "COMMA", "nm", "collate", "sortorder"], ["nm", "collate", "sortorder"]]
# e.g. "idlist"=>[["idlist", "COMMA", "nm"], ["nm"]]
# e.g. "conslist"=>[["conslist", "tconscomma", "tcons"], ["tcons"]]
def mutate_one_or_more_w_sep(rule, pair)
  return unless pair.size == 2
  base, recurse = pair.sort_by(&:size)
  return unless base.size > 0
  _rule, separator, *rest = recurse
  return unless _rule == rule && rest == base

  # rule ::= rule separator rest | rest
	#      vvv
  # rule ::= rest | rest separator rule
  [rule, [rest, rest + [separator, rule]]]
end

# e.g. "vtabarg"=>[[], ["vtabarg", "vtabargtoken"]]
def mutate_zero_or_more_no_sep(rule, pair)
  return unless pair.size == 2
  empty, recurse = pair.sort_by(&:size)
  return unless empty.size == 0
  _rule, *rest = recurse
  return unless _rule == rule

  # rule ::= rule rest | ε
  #      vvv
  # rule ::= ε | rest rule
  [rule, [[], rest + [rule]]]
end

# e.g. "table_option_set"=>[[], ["table_option"], ["table_option_set", "COMMA", "table_option"]]
def mutate_zero_or_more_w_sep(rule, triple)
  return unless triple.size == 3
  empty, base, recurse = triple.sort_by(&:size)
  return unless empty.size == 0
  _rule, separator, *rest = recurse
  return unless _rule == rule && rest == base

  # rule ::= ε | rest | rule separator rest
  #      vvv
  # rule ::= ε | rest | rest separator rule
  [rule, [[], rest, rest + [separator, rule]]]
end

# e.g. "mvalues"=>[["values", "COMMA", "LP", "nexprlist", "RP"], ["mvalues", "COMMA", "LP", "nexprlist", "RP"]]
def mutate_one_or_more_w_sep_and_initial(rule, pair)
  return unless pair.size == 2
  base, recurse = pair.sort_by { |it| it[0] == rule ? 1 : 0 }
  return unless base.size == recurse.size
  initial, separator, *lrest = base
  _rule, separator, *rrest = recurse
  return unless _rule == rule && lrest == rrest

  # rule ::= initial separator rest | rule separator rest
  #      vvv
  # rule ::= initial separator rest | rest separator rule
  [rule, [base, lrest + [separator, rule]]]
end

# e.g. "setlist"=>[
# 	["setlist", "COMMA", "nm", "EQ", "expr"],
# 	["nm", "EQ", "expr"],
# 	["setlist", "COMMA", "LP", "idlist", "RP", "EQ", "expr"],
# 	["LP", "idlist", "RP", "EQ", "expr"]
# ]
def mutate_one_or_more_with_sep_and_variations(rule, definitions)
	return unless definitions.size.even?
	return unless definitions.any? { |it| it[0] == rule }
	recurses, bases = definitions.partition { |it| it[0] == rule }
	matching_pairs = recurses.map do |recurs|
		match = bases.find { |base| (base - recurs).empty? }
		return unless match

		[recurs, match]
	end
	mutation = matching_pairs.flat_map do |definition_pair|
		rule, result_definitions = mutate_one_or_more_w_sep(rule, definition_pair)
		result_definitions
	end

	[rule, mutation]
end

# e.g. "anylist"=>[[], ["anylist", "LP", "anylist", "RP"], ["anylist", "ANY"]]
# - CREATE VIRTUAL TABLE e USING echo(r, e_log, virtual, 1, 2, 3, varchar(32));
def mutate_pair_combinations(rule, definitions)
	mutations = definitions.combination(2).filter_map do |pair|
  	_rule, result_definitions =
   		mutate_one_or_more_no_sep(rule, pair) ||
			mutate_one_or_more_w_sep(rule, pair) ||
			mutate_zero_or_more_no_sep(rule, pair) ||
			mutate_one_or_more_w_sep_and_initial(rule, pair)

		result_definitions
	end
	return if mutations.empty?
	mutation = mutations.flatten(1).uniq

	[rule, mutation]
end

def reduce_required_then_optional(definitions)
	return unless definitions.size > 1
	return if definitions.any? { |it| it.size == 0 }
  base, *rest = definitions.sort_by(&:size)
  return unless rest.all? { |it| starts_with?(it, base) }
  remaining = rest.map { |it| it[base.size..-1] }

	[base.join(' '), remaining]
end

def reduce_optional_then_required(definitions)
	return unless definitions.size > 1
	return if definitions.any? { |it| it.size == 0 }
	*rest, base = definitions.sort_by(&:size)
	return unless rest.all? { |it| ends_with?(base, it) }
	remaining = rest.map { |it| it[0..-base.size] }

	[base.join(' '), remaining]
end

def reduce_all_optionals(definitions)
	return unless definitions.size > 1
	return if definitions.any? { |it| it.size == 0 }
	*subsets, superset = definitions.sort_by(&:size)
	match = subsets.permutation(2).find { |it| it.flatten == superset }
	return unless match

	[match.map { |it| "(#{it.join(' ')})?" }.join(' '), []]
end

[["nm"], ["nm", "DOT", "nm"], ["nm", "DOT", "nm", "AS", "nm"], ["nm", "AS", "nm"]]
"nm (DOT nm)? (AS nm)?"

# transform the `expr` rule into layered rules
def mutate_expr(rule, definitions)
	return unless rule == 'expr'

	expr_rules = $contents
		.scan(/^.*expr.*::=(?:(?:.+?{)|(?:[^.]+?\.))/)
		.filter_map do |it|
			rule, raw_definition = it.tap(&:strip!).gsub(/\(.*?\)/, '').split(' ::= ')
			next unless rule == 'expr'
			definition, operator = raw_definition.chomp('{').tap(&:strip!).split(/\.\s*/)
			sequences = definition&.split(/\s+/)&.map { |it| it.split('|') }&.reduce(&:product)&.map{ |it| Array(it).flatten }

			[sequences, operator&.byteslice(1..-2)]
		end
	precedence_levels = $contents
		.scan(/^(?:%left[^.]+\.)|(?:%right[^.]+\.)|(?:%nonassoc[^.]+\.)/)
		.map { |s| assoc, ops = s.scan(/^%(.+?)[[:space:]]([^.]+)\./)[0]; [assoc,ops.split(/[[:space:]]+/)] }

	operators_w_precedence = precedence_levels.flat_map(&:last)
	recursive_expr_rules = expr_rules.select do |seq, op|
		next false if seq.none? { |it| it.include?('expr') }
		next true if op

		seq.any? { |it| it.intersect?(operators_w_precedence) }
	end
	precedence_layer_rules = precedence_levels.map do |assoc, operators|
		rules = recursive_expr_rules
			.select { |seq, op| op.nil? ? seq.any? { |it| it.intersect?(operators) } : operators.include?(op) }

		if assoc == 'right'
			rules.select! { |seq, op| op.nil? ? seq.any? { |it| operators.include?(it[0]) } : operators.include?(op) }
		end

		rules.concat(
			recursive_expr_rules.select do |seq, op|
				seq.any? { |it| contains?(it, ['NOT', 'NULL']) }
			end
		) if operators.include?('NOTNULL')

		rule_name =
			if operators.size == 1
				"#{operators[0].downcase}_expr"
			elsif operators.include?('IS')
				"predicate_expr"
			elsif operators.include?('GT')
				"comparative_expr"
			elsif operators.include?('BITAND')
				"bitwise_expr"
			elsif operators.include?('PLUS')
				"additive_expr"
			elsif operators.include?('STAR')
				"multiplicative_expr"
			elsif operators.include?('CONCAT')
				"manipulative_expr"
			end

		[rule_name, assoc, rules.flat_map(&:first)]
	end

	atom_layer_rules = definitions - precedence_layer_rules.flat_map(&:last)
	layer_0, rest = atom_layer_rules.partition { |it| it.all? { |s| s.getbyte(0) <= 90 } }
	layer_1, layer_2 = rest.partition { |it| !it.include?('expr') }

	layered_rules = precedence_layer_rules + [
		['layer_2_expr', layer_2],
		['layer_1_expr', layer_1],
		['layer_0_expr', layer_0],
	]
	# or_expr ::= and_expr | and_expr OR or_expr
	layered_rules.each_cons(2).take(3).map do |(l_layer, rules), (r_layer, _)|
		new_rules = rules.map do |rule|
			first, *rest, last = rule
			first = r_layer if first == 'expr'
			last = l_layer if last == 'expr'
			rest.map! { |item| item == 'expr' ? l_layer : item }
			[first, *rest, last]
		end
		[l_layer, [[r_layer], new_rules]]
	end


	[['expr', [precedence_layer_rules.first.first]]] + layered_rules
end






new_grammar = grammar.flat_map do |rule, definitions|
  mutation =
	  mutate_expr(rule, definitions) ||
  	mutate_one_or_more_no_sep(rule, definitions) ||
   	mutate_one_or_more_w_sep(rule, definitions) ||
    mutate_zero_or_more_no_sep(rule, definitions) ||
    mutate_zero_or_more_w_sep(rule, definitions) ||
    mutate_one_or_more_w_sep_and_initial(rule, definitions) ||
    mutate_one_or_more_with_sep_and_variations(rule, definitions) ||
    mutate_pair_combinations(rule, definitions)

  next [[rule, definitions]] if mutation.nil?
  mutation.size == 2 ? [mutation] : mutation
end.to_h


grammar.transform_values(&:size).sort_by(&:last).to_h

def determine_rule_levels(grammar)
  levels = {}
  is_terminal = ->(s) { s.getbyte(0) <= 90 }
  can_resolve = ->(rule_symbols, max_level) {
    rule_symbols.all? { |s| is_terminal.call(s) || levels[s]&.between?(0, max_level) }
  }

  recursive_rules = grammar.select do |rule, productions|
    productions.any? { |prod| prod.include?(rule) }
  end.keys.to_set
  recursive_rules.each { |rule| levels[rule] = -1 }

  current_level = 0
  until levels.size == grammar.size
    resolved_any = false

    grammar.each do |rule, productions|
      next if levels.key?(rule)

      if productions.all? { |prod| can_resolve.call(prod, current_level) }
        levels[rule] = current_level
        resolved_any = true
      end
    end

    # If we couldn't resolve any rules, assign remaining rules to current level
    unless resolved_any
      grammar.keys.each do |rule|
        levels[rule] ||= current_level
      end
      break
    end

    current_level += 1
  end

  levels
end


# EXPLAIN (QUERY PLAN)?
# => [["EXPLAIN"], ["EXPLAIN", "QUERY", "PLAN"]]











grammar.values.flatten.uniq.select { |it| it.getbyte(0) <= 90 }.size
# => 168
grammar.size
# => 137
recursive_rules = grammar.select {|k,vs| vs.any? {|v| v.include?(k) } }
# => 24

def find_all_token_sequences(start_rule)
  results = Set.new
  queue = [[start_rule]]

  while (current_sequence = queue.shift)
    if current_sequence.all? { |item| item.getbyte(0) <= 90 }
      results.add(current_sequence)
      puts results.size
    else
      # Find first non-token (lowercase symbol)
      i, len = 0, current_sequence.length
      while i < len
      	break if current_sequence[i].getbyte(0) > 90
      	i += 1
      end

      current_rule = current_sequence[i]
      definitions = GRAMMAR[current_rule]

      prefix = current_sequence[0...i]
      suffix = current_sequence[(i + 1)..-1]
      p({current_rule: current_rule, current_sequence: current_sequence, definitions: definitions, prefix: prefix, suffix: suffix})

      definitions.each do |definition|
	      next if definition.include?(current_rule)
        queue << (prefix + definition + suffix)
      end
    end
  end

  results
end